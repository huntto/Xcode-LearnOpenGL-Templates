<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>me.huntto.dt.unit.LearnOpenGL.HelloTriangle</string>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.base</string>
		<string>com.apple.dt.unit.osxBase</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>SortOrder</key>
	<integer>50</integer>
	<key>Description</key>
	<string>This template creates a LearnOpenGL project of HelloTriangle.</string>
	<key>Targets</key>
	<array>
		<dict>
			<key>ProductType</key>
			<string>com.apple.product-type.tool</string>
			<key>TargetIdentifier</key>
			<string>com.apple.dt.commandLineToolTarget</string>
			<key>BuildPhases</key>
			<array>
				<dict>
					<key>Class</key>
					<string>Sources</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>Frameworks</string>
				</dict>
				<dict>
					<key>Class</key>
					<string>CopyFiles</string>
					<key>DstPath</key>
					<string>/usr/share/man/man1/</string>
					<key>DstSubfolderSpec</key>
					<string>0</string>
					<key>RunOnlyForDeploymentPostprocessing</key>
					<string>YES</string>
				</dict>
			</array>
			<key>Frameworks</key>
			<array>
				<string>OpenGL</string>
			</array>
		</dict>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>languageChoice</string>
			<key>Name</key>
			<string>Language:</string>
			<key>Description</key>
			<string>The primary implementation language for the command-line tool</string>
			<key>Default</key>
			<string>Swift</string>
			<key>Type</key>
			<string>popup</string>
			<key>Values</key>
			<array>
				<string>C++</string>
			</array>
			<key>Units</key>
			<dict>
				<key>C++</key>
				<dict>
					<key>Nodes</key>
					<array>
						<string>main.cpp:comments</string>
						<string>main.cpp:include</string>
						<string>main.cpp:functions</string>
						<string>main.cpp:settings</string>
						<string>main.cpp:shader_source</string>
						<string>main.cpp:main:content</string>
						<string>main.cpp:processInput</string>
						<string>main.cpp:framebuffer_size_callback</string>
						<string>glad.c</string>
						<string>stb_image.cpp</string>
					</array>
					<key>Definitions</key>
					<dict>
						<key>main.cpp:include</key>
						<string>#include &lt;glad/glad.h&gt;
#include &lt;GLFW/glfw3.h&gt;

#include &lt;iostream&gt;
</string>
						<key>main.cpp:main:content</key>
						<string>// glfw: initialize and configure
// ------------------------------
glfwInit();
glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // uncomment this statement to fix compilation on OS X

// glfw window creation
// --------------------
GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, &quot;LearnOpenGL&quot;, NULL, NULL);
if (window == NULL)
{
    std::cout &lt;&lt; &quot;Failed to create GLFW window&quot; &lt;&lt; std::endl;
    glfwTerminate();
    return -1;
}
glfwMakeContextCurrent(window);
glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

// glad: load all OpenGL function pointers
// ---------------------------------------
if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
{
    std::cout &lt;&lt; &quot;Failed to initialize GLAD&quot; &lt;&lt; std::endl;
    return -1;
}


// build and compile our shader program
// ------------------------------------
// vertex shader
int vertexShader = glCreateShader(GL_VERTEX_SHADER);
glShaderSource(vertexShader, 1, &amp;vertexShaderSource, NULL);
glCompileShader(vertexShader);
// check for shader compile errors
int success;
char infoLog[512];
glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);
if (!success)
{
    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
    std::cout &lt;&lt; &quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;
}
// fragment shader
int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
glShaderSource(fragmentShader, 1, &amp;fragmentShaderSource, NULL);
glCompileShader(fragmentShader);
// check for shader compile errors
glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);
if (!success)
{
    glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
    std::cout &lt;&lt; &quot;ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;
}
// link shaders
int shaderProgram = glCreateProgram();
glAttachShader(shaderProgram, vertexShader);
glAttachShader(shaderProgram, fragmentShader);
glLinkProgram(shaderProgram);
// check for linking errors
glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);
if (!success) {
    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
    std::cout &lt;&lt; &quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\n&quot; &lt;&lt; infoLog &lt;&lt; std::endl;
}
glDeleteShader(vertexShader);
glDeleteShader(fragmentShader);

// set up vertex data (and buffer(s)) and configure vertex attributes
// ------------------------------------------------------------------
float vertices[] = {
    -0.5f, -0.5f, 0.0f, // left  
     0.5f, -0.5f, 0.0f, // right 
     0.0f,  0.5f, 0.0f  // top   
}; 

unsigned int VBO, VAO;
glGenVertexArrays(1, &amp;VAO);
glGenBuffers(1, &amp;VBO);
// bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
glBindVertexArray(VAO);

glBindBuffer(GL_ARRAY_BUFFER, VBO);
glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
glEnableVertexAttribArray(0);

// note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute&apos;s bound vertex buffer object so afterwards we can safely unbind
glBindBuffer(GL_ARRAY_BUFFER, 0); 

// You can unbind the VAO afterwards so other VAO calls won&apos;t accidentally modify this VAO, but this rarely happens. Modifying other
// VAOs requires a call to glBindVertexArray anyways so we generally don&apos;t unbind VAOs (nor VBOs) when it&apos;s not directly necessary.
glBindVertexArray(0); 


// uncomment this call to draw in wireframe polygons.
//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

// render loop
// -----------
while (!glfwWindowShouldClose(window))
{
    // input
    // -----
    processInput(window);

    // render
    // ------
    glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);

    // draw our first triangle
    glUseProgram(shaderProgram);
    glBindVertexArray(VAO); // seeing as we only have a single VAO there&apos;s no need to bind it every time, but we&apos;ll do so to keep things a bit more organized
    glDrawArrays(GL_TRIANGLES, 0, 3);
    // glBindVertexArray(0); // no need to unbind it every time 

    // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
    // -------------------------------------------------------------------------------
    glfwSwapBuffers(window);
    glfwPollEvents();
}

// optional: de-allocate all resources once they&apos;ve outlived their purpose:
// ------------------------------------------------------------------------
glDeleteVertexArrays(1, &amp;VAO);
glDeleteBuffers(1, &amp;VBO);

// glfw: terminate, clearing all previously allocated GLFW resources.
// ------------------------------------------------------------------
glfwTerminate();
return 0;</string>
						<key>main.cpp:processInput</key>
						<string>
// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow *window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}</string>
						<key>main.cpp:framebuffer_size_callback</key>
						<string>
// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and 
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}</string>
						<key>main.cpp:functions</key>
						<string>void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow *window);
</string>
						<key>main.cpp:settings</key>
						<string>// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;
</string>
						<key>main.cpp:shader_source</key>
						<string>const char *vertexShaderSource = &quot;#version 330 core\n&quot;
    &quot;layout (location = 0) in vec3 aPos;\n&quot;
    &quot;void main()\n&quot;
    &quot;{\n&quot;
    &quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;
    &quot;}\0&quot;;
const char *fragmentShaderSource = &quot;#version 330 core\n&quot;
    &quot;out vec4 FragColor;\n&quot;
    &quot;void main()\n&quot;
    &quot;{\n&quot;
    &quot;   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n&quot;
    &quot;}\n\0&quot;;
</string>
					</dict>
				</dict>
			</dict>
		</dict>
	</array>
	<key>Project</key>
	<dict>
		<key>SharedSettings</key>
		<dict>
			<key>HEADER_SEARCH_PATHS</key>
			<array>
				<string>$(GLFW_PATH)/include</string>
				<string>$(GLAD_PATH)/include</string>
				<string>$(STB_PATH)</string>
				<string>$(GLM_PATH)</string>
			</array>
			<key>OTHER_LDFLAGS</key>
			<array>
				<string>-ObjC -all_load -weak_library $(GLFW_PATH)/lib/libglfw.dylib</string>
			</array>
		</dict>
	</dict>
	<key>Definitions</key>
	<dict>
		<key>stb_image.cpp</key>
		<dict>
			<key>Path</key>
			<string>stb_image.cpp</string>
		</dict>
		<key>*:main</key>
		<dict>
			<key>Beginning</key>
			<string>int main(int argc, const char * argv[]) {</string>
			<key>End</key>
			<string>}</string>
			<key>Indent</key>
			<integer>1</integer>
		</dict>
		<key>glad.c</key>
		<dict>
			<key>Path</key>
			<string>glad.c</string>
		</dict>
	</dict>
</dict>
</plist>
